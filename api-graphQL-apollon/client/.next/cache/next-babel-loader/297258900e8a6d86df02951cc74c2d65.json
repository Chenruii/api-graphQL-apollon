{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\ruich\\\\Documents\\\\ASID202\\\\API\\\\NextJs\\\\with-apollo-app\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query product {\\n    products {\\n      id\\n      name\\n      description\\n      category\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport App from \"../components/App\";\nimport InfoBox from \"../components/InfoBox\";\nimport Header from \"../components/Header\";\nimport Submit from \"../components/Submit\";\nimport PostList from \"../components/PostList\";\nimport { withApollo } from \"../lib/apollo\";\nimport { Button, Box, Divider, Typography } from \"@material-ui/core\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nexport var ALL_PRODUCTS_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage(props) {\n  var _useQuery = useQuery(ALL_PRODUCTS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Loading...\");\n  return __jsx(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), __jsx(InfoBox, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"\\u2139\\uFE0F This example shows how to fetch all initial apollo queries on the server. If you \", __jsx(\"a\", {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"reload\"), \" this page you won't see a loader since Apollo fetched all needed data on the server. This prevents\", \" \", __jsx(\"a\", {\n    href: \"https://nextjs.org/blog/next-9#automatic-static-optimization\",\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"automatic static optimization\"), \" \", \"in favour of full Server-Side-Rendering.\"), data.products.map(function (product) {\n    return __jsx(Box, {\n      m: 3,\n      p: 1,\n      bgcolor: \"#eee\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, product.name), __jsx(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, product.description), __jsx(Typography, {\n      variant: \"caption\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, product.category));\n  }), __jsx(Box, {\n    mt: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"material-ui works\")));\n};\n\nexport default withApollo(IndexPage);","map":{"version":3,"sources":["C:\\Users\\ruich\\Documents\\ASID202\\API\\NextJs\\with-apollo-app\\pages\\index.js"],"names":["App","InfoBox","Header","Submit","PostList","withApollo","Button","Box","Divider","Typography","gql","useQuery","ALL_PRODUCTS_QUERY","IndexPage","props","data","loading","error","products","map","product","name","description","category"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,mBAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,UAA/B,QAAiD,mBAAjD;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAO,IAAMC,kBAAkB,GAAGF,GAAH,mBAAxB;;AAWP,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK,EAAI;AAAA,kBACMH,QAAQ,CAACC,kBAAD,CADd;AAAA,MAClBG,IADkB,aAClBA,IADkB;AAAA,MACZC,OADY,aACZA,OADY;AAAA,MACHC,KADG,aACHA,KADG;;AAGzB,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAGb,SACA,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAEiB;AAAG,IAAA,IAAI,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFjB,yGAGoE,GAHpE,EAIE;AACE,IAAA,IAAI,EAAC,8DADP;AAEE,IAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAJF,EASO,GATP,6CAFF,EAeGD,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAkB,UAAAC,OAAO;AAAA,WACxB,MAAC,GAAD;AAAK,MAAA,CAAC,EAAE,CAAR;AAAW,MAAA,CAAC,EAAE,CAAd;AAAiB,MAAA,OAAO,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0BA,OAAO,CAACC,IAAlC,CADF,EAEE,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6BD,OAAO,CAACE,WAArC,CAFF,EAGE,MAAC,UAAD;AAAY,MAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BF,OAAO,CAACG,QAAvC,CAHF,CADwB;AAAA,GAAzB,CAfH,EAuBE,MAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CAvBF,CADA;AA8BA,CApCF;;AAsCA,eAAelB,UAAU,CAACQ,SAAD,CAAzB","sourcesContent":["import App from \"../components/App\";\nimport InfoBox from \"../components/InfoBox\";\nimport Header from \"../components/Header\";\nimport Submit from \"../components/Submit\";\nimport PostList from \"../components/PostList\";\nimport { withApollo } from \"../lib/apollo\";\nimport { Button, Box, Divider, Typography } from \"@material-ui/core\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks'\n\nexport const ALL_PRODUCTS_QUERY = gql`\n  query product {\n    products {\n      id\n      name\n      description\n      category\n      price\n    }\n  }\n` \nconst IndexPage = props => {\n  const {data, loading, error} = useQuery(ALL_PRODUCTS_QUERY);\n\n  if (loading) return <div>Loading...</div>;\n\n  \n  return (\n  <App>\n    <Header />\n    <InfoBox>\n      ℹ️ This example shows how to fetch all initial apollo queries on the\n      server. If you <a href=\"/\">reload</a> this page you won't see a loader\n      since Apollo fetched all needed data on the server. This prevents{\" \"}\n      <a\n        href=\"https://nextjs.org/blog/next-9#automatic-static-optimization\"\n        target=\"_blank\"\n      >\n        automatic static optimization\n      </a>{\" \"}\n      in favour of full Server-Side-Rendering.\n    </InfoBox>\n\n    {data.products.map(product => (\n      <Box m={3} p={1} bgcolor=\"#eee\">\n        <Typography variant=\"h6\">{product.name}</Typography>\n        <Typography variant=\"body1\">{product.description}</Typography>\n        <Typography variant=\"caption\">{product.category}</Typography>\n\n      </Box>\n    ))}\n    <Box mt={3}>\n      <Button variant=\"contained\" color=\"primary\">\n        material-ui works\n      </Button>\n    </Box>\n  </App> \n)};\n\nexport default withApollo(IndexPage);"]},"metadata":{},"sourceType":"module"}